#!/usr/bin/env python
# -*- coding: utf-8 -*-
from upconfig import *

def run():
    # required
    remote = globals().get("remote","github")
    user = globals().get("user",True)
    # optional
    push = globals().get("push",True)
    force = globals().get("force",True)
    commit = globals().get("commit",str(datetime.now()))
    if not user:
        err = "config.user is undefined"
        raise NotImplementedError(err)
    path = gitroot(__file__)
    if not path:
        err = "%s not a git repository" % dirname(__file__)
        raise OSError(err)
    print("%s:" % path)
    name = ghname(basename(path))
    repo = GitRepo(path)
    remotes = filter(
        lambda r:GHURL(r.url).github,
        repo.remotes
    )
    r = None
    if remotes:
        r = remotes[0]
        remote = r.name
        url = r.url
        print(url)
        user = GHURL(url).user
    data = dict(name=name,user=user)
    response = post("/user/repos",data)
    json = response.json()
    status_code = response.status_code
    if "ssh_url" in json:
        ssh_url = json["ssh_url"]
    else:
        ssh_url = GHURL(user=user,repo=name).ssh_url
    if status_code in [200,201,422]:
        # 422 name already exists on this account
        if status_code in [200,201]:
            print("POST /user/repos")
            print(data)
            print(GHURL(ssh_url).html_url)
        if commit:
            try:
                repo.add()
                repo.commit(commitmsg)
            except: 
                pass
        if not r:
            repo.create_remote(remote,ssh_url)
            msg = "git remote add %s %s" % (remote,ssh_url)
            print(msg)
            repo.commit(msg)
        if push:
            repo.push(remote,force=force)
    else:
        print("")
        print("%s %s" % (status_code,json))
    
if __name__=="__main__":
    upconfig("config.py")
    upconfig("include.py")
    run()
